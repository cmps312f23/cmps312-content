package dataclasses

// ----------------------------
// Definition
// ----------------------------
/*
    1. The purpose of the data class is to to hold data.
    2. The compiler automatically generates the following methods for
       all the properties in the primary constructor
        - equals()/hashCode()
        - toString()
        - copy()
        - componentN()
    See http://kotlinlang.org/docs/reference/data-classes.html#data-classes
*/

// ----------------------------
// Requirements
// ----------------------------
/*
    To ensure consistency and correct behavior, the data class must
    fulfill the following requirements:
        - The primary constructor must have at least one parameter.
        - All parameters in the primary constructor must be declared as either 'val' or 'var'
        - Data classes cannot be abstract, sealed, opened, or inner.
*/

// Use the keyword 'data' to create it
data class Book(val name: String, val isbn: String)

// Properties can be declared in the class body but the autogenerated methods will not apply to them
data class Person(val name: String, val lastname: String) {
    var age = 0
}

fun main() {

    // ----------------------------
    // Destructuring a class
    // ----------------------------
    val myBook = Book("Kotlin Course", "978123")
    val (name, isbn) = myBook
    println("The book $isbn is called $name")

    // ----------------------------
    // Explaining componentN()
    // ----------------------------
    /*
        - Each property declared in the primary constructor is a component.
        Since the "Person" class has two properties
        in the primary constructor it has component1() and component2() available.

        - Although the "Person" class has an 'age' property, since it is declared in
        the body of the class, it is not considered as part of the auto generated
        methods such as componentN()
     */
    val person = Person("John", "Smith")
    val firstname = person.component1()
    val lastname = person.component2()
    println("Hello $lastname, $firstname")

    // ----------------------------
    // Equality
    // ----------------------------
    /*
        - Although the two classes have different values for 'age,'
        since the 'age' variable was declared in the body,
        the method equals() does not apply to it.
        Therefore, the compiler only takes into account the properties
        defined in the primary constructor when determining equality of two instances.
     */
    val youngJohn = Person("John", "Smith")
    youngJohn.age = 20

    val oldJohn = Person("John", "Smith")
    oldJohn.age = 30

    println(youngJohn == oldJohn) // Prints --> true

    // ----------------------------
    // Explaining copy()
    // ----------------------------
    /*
        - As the name suggests, the copy() methods allows us to copy the attributes
        of one instance. However, it also allows us to modify certain values
        and keeping the rest the same, if needed.
     */
    val originalBook = Book("Kotlin Rocks!", "978000")
    val exactCopy = originalBook.copy()
    val modifiedCopy = originalBook.copy(name = "Kotlin Super Rocks!")

    println(originalBook)
    println(exactCopy)
    println(modifiedCopy)
}